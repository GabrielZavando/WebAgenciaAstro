---
interface Props {
  id: string;
  title: string;
}

const { id, title } = Astro.props;
---

<div class="modal" id={id} role="dialog" aria-modal="true">
  <button 
    class="modal__close" 
    aria-label="Cerrar modal"
  >
    &times;
  </button>
  <div class="modal__content">
    <h3 class="modal__title">{title}</h3>
    <div class="modal__body">
      <slot />
    </div>
  </div>
</div>

<style lang="scss">
  @use '../styles/config' as *;

  .modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.8);
    backdrop-filter: blur(4px);
    z-index: var(--z-modal);
    padding: var(--space-md);
    display: flex;
    justify-content: center;
    align-items: center;
    opacity: 0;
    visibility: hidden;
    transition: opacity var(--transition-normal) ease;
    pointer-events: none;
    
    &.active {
      opacity: 1;
      visibility: visible;
      pointer-events: all;
    }

    &__content {
      background: var(--color-surface);
      padding: var(--space-xl);
      border-radius: 0; // Completamente rectangular para flat design
      width: 95%;
      max-width: #{container(max)};
      max-height: 90vh;
      position: relative;
      overflow-y: auto;
      box-shadow: var(--shadow-xl);
      transform: scale(0.7) translateY(2rem);
      transition: all var(--transition-normal) ease;
      border: 1px solid var(--color-border); // Añadir borde flat
      
      @media (min-width: #{container(narrow)}) {
        width: 90%;
        padding: var(--space-xxl);
      }
      
      .modal.active & {
        transform: scale(1) translateY(0);
      }
    }

    &__close {
      position: absolute;
      top: var(--space-md);
      right: var(--space-md);
      font-size: 1.75rem;
      background: var(--color-surface);
      border: 1px solid var(--color-border);
      color: var(--color-text);
      cursor: pointer;
      padding: var(--space-xs) var(--space-sm);
      line-height: 1;
      transition: all var(--transition-normal) ease;
      z-index: calc(var(--z-modal) + 1);
      border-radius: 0; // Flat design
      font-weight: 400;
      width: 2.5rem;
      height: 2.5rem;
      display: flex;
      align-items: center;
      justify-content: center;

      &:hover {
        background: var(--color-primary);
        color: var(--color-white);
        border-color: var(--color-primary);
      }
    }

    &__title {
      font-family: var(--font-headings);
      font-weight: 700;
      color: var(--color-text);
      margin-bottom: var(--space-lg);
      font-size: 1.5rem;

      @media (min-width: #{container(narrow)}) {
        font-size: 1.875rem;
      }

      @media (min-width: #{container(max)}) {
        font-size: 2.25rem;
      }
    }

    &__body {
      color: var(--color-text);
      line-height: 1.7;
      font-family: var(--font-primary);
      font-size: 1rem;

      @media (min-width: #{container(narrow)}) {
        font-size: 1.125rem;
      }

      @media (min-width: #{container(max)}) {
        font-size: 1.25rem;
      }
      
      :global(ul) {
        list-style-type: disc;
        padding-left: var(--space-lg);
        margin: var(--space-md) 0;
      }

      :global(li) {
        margin-bottom: var(--space-xs);
        line-height: 1.6;
      }
    }
  }
</style>

<script>
  // Funcionalidad del modal
  document.addEventListener('DOMContentLoaded', () => {
    // Función para abrir modal
    function openModal(modalId: string) {
      const modal = document.getElementById(modalId);
      if (modal) {
        modal.classList.add('active');
        document.body.style.overflow = 'hidden'; // Prevenir scroll del body
      }
    }

    // Función para cerrar modal
    function closeModal(modal: HTMLElement) {
      modal.classList.remove('active');
      document.body.style.overflow = ''; // Restaurar scroll del body
    }

    // Función para cerrar todos los modales
    function closeAllModals() {
      const activeModals = document.querySelectorAll('.modal.active');
      activeModals.forEach(modal => closeModal(modal as HTMLElement));
    }

    // Event listeners para botones "Ver más"
    const serviceButtons = document.querySelectorAll('[data-modal]');
    serviceButtons.forEach(button => {
      button.addEventListener('click', (e) => {
        e.preventDefault();
        const modalId = button.getAttribute('data-modal');
        if (modalId) {
          openModal(modalId);
        }
      });
    });

    // Event listeners para botones de cerrar
    const closeButtons = document.querySelectorAll('.modal__close');
    closeButtons.forEach(button => {
      button.addEventListener('click', (e) => {
        e.preventDefault();
        const modal = button.parentElement; // Ahora el botón es hijo directo del modal
        if (modal && modal.classList.contains('modal')) {
          closeModal(modal as HTMLElement);
        }
      });
    });

    // Cerrar modal al hacer click fuera del contenido (pero no en el botón de cerrar)
    const modals = document.querySelectorAll('.modal');
    modals.forEach(modal => {
      modal.addEventListener('click', (e) => {
        // Solo cerrar si el click es en el overlay del modal, no en el contenido ni en el botón
        if (e.target === modal) {
          closeModal(modal as HTMLElement);
        }
      });
    });

    // Cerrar modal con la tecla Escape
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') {
        closeAllModals();
      }
    });
  });
</script>
