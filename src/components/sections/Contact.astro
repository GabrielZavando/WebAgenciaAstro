---
---

<section class="contact" id="contact">
    <div class="contact__container">
        <h2 class="title-section">Contacto</h2>
        <p class="contact__subtitle">¿Tienes un proyecto en mente? Cuéntame sobre él</p>

        <form class="contact-form" id="contactForm">
            <!-- INSTRUCCIONES PARA INTEGRAR CON MAKE.COM:
                 
                 PASO 1: Crear webhook en Make.com
                 - Ve a Make.com > Crear nuevo escenario
                 - Añade "Webhooks" > "Custom webhook"
                 - En Advanced settings, habilita CORS
                 - Copia la URL del webhook
                 
                 PASO 2: Actualizar configuración
                 - Reemplaza 'TU_NUEVA_URL_DE_WEBHOOK_AQUI' en el JavaScript
                 - Cambia TEST_MODE = false
                 
                 PASO 3: Campos que se envían
                 - name, email, phone, message, timestamp, source
            -->
            <div class="form-group">
                <label for="name" class="form-label">Nombre completo *</label>
                <input 
                    type="text" 
                    id="name" 
                    name="name" 
                    class="form-input"
                    required
                    placeholder="¿Cómo te llamas?"
                />
            </div>

            <div class="form-group">
                <label for="email" class="form-label">Correo electrónico *</label>
                <input 
                    type="email" 
                    id="email" 
                    name="email" 
                    class="form-input"
                    required
                    placeholder="tu@correo.com"
                />
            </div>

            <div class="form-group">
                <label for="phone" class="form-label">Teléfono (opcional)</label>
                <input 
                    type="tel" 
                    id="phone" 
                    name="phone" 
                    class="form-input"
                    placeholder="+56 9 XXXX XXXX"
                />
            </div>

            <div class="form-group">
                <label for="message" class="form-label">Mensaje *</label>
                <textarea 
                    id="message" 
                    name="message" 
                    class="form-input form-textarea"
                    required
                    placeholder="Cuéntame sobre tu proyecto..."
                ></textarea>
                <div class="character-counter">
                    <span id="currentCount">0</span>
                    <span>/</span>
                    <span>1500 caracteres</span>
                </div>
            </div>

            <!-- Campos ocultos eliminados: Make.com no los requiere por defecto -->

            <button type="submit" class="btn-cta__solid">
                Enviar mensaje
            </button>
        </form>
    </div>
</section>

<!-- Modales de éxito y error -->
<div class="success-modal" id="successModal" role="dialog" aria-modal="true">
    <div class="success-modal__content">
        <button 
            class="success-modal__close" 
            aria-label="Cerrar modal"
        >
            &times;
        </button>
        <div class="success-modal__icon">✅</div>
        <h3 class="success-modal__title">¡Mensaje Enviado!</h3>
        <p class="success-modal__text">
            Gracias por contactarme. He recibido tu mensaje y me pondré en contacto contigo lo antes posible.
        </p>
        <button class="modal-btn" id="successModalBtn">
            Cerrar
        </button>
    </div>
</div>

<div class="error-modal" id="errorModal" role="dialog" aria-modal="true">
    <div class="error-modal__content">
        <button 
            class="error-modal__close" 
            aria-label="Cerrar modal"
        >
            &times;
        </button>
        <div class="error-modal__icon">❌</div>
        <h3 class="error-modal__title">Error al Enviar</h3>
        <p class="error-modal__text">
            Lo siento, ha ocurrido un error al enviar tu mensaje. Por favor, inténtalo de nuevo o contáctame directamente.
        </p>
        <button class="modal-btn" id="errorModalBtn">
            Cerrar
        </button>
    </div>
</div>

<style lang="scss">
    @use '../../styles/config' as *;

    .contact {
        padding: var(--space-xl) 0;
        background-color: var(--color-surface);
    }

    .contact__container {
        // Container usando el nuevo sistema
        width: 100%;
        max-width: #{container(max)};
        margin: 0 auto;
        padding: 0 var(--padding-container);
        text-align: center;
    }

    .contact__subtitle {
        color: var(--color-text-secondary);
        font-size: 1.125rem;
        line-height: 1.6;
        margin-bottom: var(--space-xl);
        max-width: 600px;
        margin-left: auto;
        margin-right: auto;
    }

    // Formulario de contacto
    .contact-form {
        max-width: 600px;
        margin: 0 auto;
        text-align: left;

        @include respond-to(xs) {
            width: 100%;
            max-width: 75%; // Mismo ancho que las tarjetas de planes desde 480px
        }

        @media (min-width: #{container(narrow)}) {
            max-width: 600px; // Volver al ancho original en desktop
        }
    }

    .form-group {
        margin-bottom: var(--space-lg);
        position: relative;
    }

    .form-label {
        display: block;
        font-family: var(--font-headings);
        font-weight: 600;
        color: var(--color-text);
        margin-bottom: var(--space-sm);
        font-size: 0.9rem;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .form-input {
        width: 100%;
        padding: var(--space-md);
        border: 2px solid var(--color-border);
        border-radius: 0; // Flat design
        background: var(--color-white);
        font-family: var(--font-primary);
        font-size: 1rem;
        color: var(--color-text);
        transition: all var(--transition-normal) ease;
        outline: none;

        &::placeholder {
            color: var(--color-text-muted);
            opacity: 0.7;
        }

        &:focus {
            border-color: var(--color-primary);
            box-shadow: 0 0 0 3px rgba(var(--color-primary-rgb), 0.1);
        }

        &:invalid:not(:placeholder-shown) {
            border-color: var(--color-error, #dc2626);
        }

        &:valid:not(:placeholder-shown) {
            border-color: var(--color-success, #059669);
        }
    }

    .form-textarea {
        min-height: 120px;
        resize: vertical;
        font-family: var(--font-primary);
        line-height: 1.5;
    }

    // Contador de caracteres
    .character-counter {
        text-align: right;
        margin-top: var(--space-xs);
        font-size: 0.8rem;
        color: var(--color-text-muted);
        font-family: var(--font-primary);

        #currentCount {
            font-weight: 600;
            color: var(--color-text-secondary);
        }

        &.warning #currentCount {
            color: var(--color-warning, #f59e0b);
        }

        &.error #currentCount {
            color: var(--color-error, #dc2626);
        }
    }

    // Botón de envío
    .contact-form .btn-cta__solid {
        width: 100%;
        margin-top: var(--space-lg);
        padding: var(--space-md) var(--space-lg);
        font-size: 1.1rem;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        position: relative;
        overflow: hidden;

        &:disabled {
            opacity: 0.6;
            cursor: not-allowed;
        }

        &:hover:not(:disabled) {
            transform: translateY(-2px);
        }

        // Efecto de loading
        &.loading {
            color: transparent;

            &::after {
                content: '';
                position: absolute;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                width: 20px;
                height: 20px;
                border: 2px solid transparent;
                border-top: 2px solid var(--color-white);
                border-radius: 50%;
                animation: spin 1s linear infinite;
            }
        }
    }

    // Animación de loading
    @keyframes spin {
        0% { transform: translate(-50%, -50%) rotate(0deg); }
        100% { transform: translate(-50%, -50%) rotate(360deg); }
    }

    // Estados de validación visual
    .form-group.error .form-input {
        border-color: var(--color-error, #dc2626);
        box-shadow: 0 0 0 3px rgba(220, 38, 38, 0.1);
    }

    .form-group.success .form-input {
        border-color: var(--color-success, #059669);
        box-shadow: 0 0 0 3px rgba(5, 150, 105, 0.1);
    }

    // Mensajes de error
    .error-message {
        color: var(--color-error, #dc2626);
        font-size: 0.8rem;
        margin-top: var(--space-xs);
        display: block;
        font-family: var(--font-primary);
    }

    // Responsive design - Solo para inputs más pequeños en móvil
    @media (max-width: #{container(narrow)}) {
        .form-input {
            padding: var(--space-sm);
        }

        .contact-form .btn-cta__solid {
            padding: var(--space-sm) var(--space-md);
            font-size: 1rem;
        }
    }



    // =========================
    // SISTEMA DE MODALES - Siguiendo el patrón de Modal.astro
    // =========================
    
    // Modal base - Siguiendo el patrón del sistema
    .success-modal,
    .error-modal {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.8);
        backdrop-filter: blur(4px);
        z-index: var(--z-modal);
        padding: var(--space-md);
        display: flex;
        justify-content: center;
        align-items: center;
        opacity: 0;
        visibility: hidden;
        transition: opacity var(--transition-normal) ease;
        pointer-events: none;
        
        // IMPORTANTE: Asegurar que esté oculto por defecto
        &:not(.active) {
            display: none;
        }
        
        &.active {
            opacity: 1;
            visibility: visible;
            pointer-events: all;
            display: flex;
        }
    }

    // Contenido del modal - Siguiendo el patrón del sistema
    .success-modal__content,
    .error-modal__content {
        background: var(--color-surface);
        padding: var(--space-xl);
        border-radius: 0; // Flat design
        width: 95%;
        max-width: 500px;
        max-height: 90vh;
        position: relative;
        overflow-y: auto;
        box-shadow: var(--shadow-xl);
        transform: scale(0.7) translateY(2rem);
        transition: all var(--transition-normal) ease;
        border: 1px solid var(--color-border);
        text-align: center;
        
        @media (min-width: #{container(narrow)}) {
            width: 90%;
            padding: var(--space-2xl);
        }
    }

    // Cuando el modal está activo
    .success-modal.active .success-modal__content,
    .error-modal.active .error-modal__content {
        transform: scale(1) translateY(0);
    }

    // Botón de cerrar - Siguiendo el patrón del sistema
    .success-modal__close,
    .error-modal__close {
        position: absolute;
        top: var(--space-md);
        right: var(--space-md);
        font-size: 1.75rem;
        background: var(--color-surface);
        border: 1px solid var(--color-border);
        color: var(--color-text);
        cursor: pointer;
        padding: var(--space-xs) var(--space-sm);
        line-height: 1;
        transition: all var(--transition-normal) ease;
        z-index: calc(var(--z-modal) + 1);
        border-radius: 0; // Flat design
        font-weight: 400;
        width: 2.5rem;
        height: 2.5rem;
        display: flex;
        align-items: center;
        justify-content: center;

        &:hover {
            background: var(--color-primary);
            color: var(--color-white);
            border-color: var(--color-primary);
        }
    }

    // Iconos de modal
    .success-modal__icon,
    .error-modal__icon {
        font-size: 4rem;
        margin-bottom: var(--space-lg);
        display: block;
        font-weight: bold;
        line-height: 1;
    }

    .success-modal__icon {
        color: var(--color-success);
    }

    .error-modal__icon {
        color: var(--color-error);
    }

    // Títulos de modal
    .success-modal__title,
    .error-modal__title {
        font-family: var(--font-headings);
        font-weight: 700;
        color: var(--color-text);
        margin-bottom: var(--space-lg);
        font-size: 1.5rem;

        @media (min-width: #{container(narrow)}) {
            font-size: 1.875rem;
        }
    }

    // Texto de modal
    .success-modal__text,
    .error-modal__text {
        color: var(--color-text);
        line-height: 1.7;
        font-family: var(--font-primary);
        font-size: 1rem;
        margin-bottom: var(--space-lg);

        @media (min-width: #{container(narrow)}) {
            font-size: 1.125rem;
        }
    }

    // Botones de modal - Usando el estilo del sistema
    .modal-btn {
        background: var(--btn-primary-bg);
        color: var(--btn-primary-text);
        border: 2px solid var(--btn-primary-bg);
        padding: var(--padding-btn);
        border-radius: 0; // Flat design
        cursor: pointer;
        font-weight: 600;
        margin-top: var(--space-lg);
        transition: all var(--transition-fast) ease;
        min-width: 160px;
        font-family: var(--font-headings);
        text-transform: uppercase;
        letter-spacing: 0.5px;
        font-size: 0.9rem;
        
        &:hover {
            background: var(--btn-primary-hover);
            border-color: var(--btn-primary-hover);
            transform: translateY(-2px);
        }
        
        &:focus {
            outline: 3px solid var(--color-accent);
            outline-offset: 2px;
        }
        
        &:active {
            transform: translateY(0);
        }
    }
</style>

<script>
    // CONFIGURACIÓN MAKE.COM - Cambia estos valores según tus necesidades
    const MAKE_WEBHOOK_URL = 'https://hook.us2.make.com/4t4ssk96zdwa9aqblpdytsfmm3o9a7pg';
    const TEST_MODE = true; // CAMBIO: Activar envío real al webhook

    // Funcionalidad del formulario de contacto
    document.addEventListener('DOMContentLoaded', () => {
        const form = document.getElementById('contactForm') as HTMLFormElement;
        const messageTextarea = document.getElementById('message') as HTMLTextAreaElement;
        const currentCount = document.getElementById('currentCount');
        const characterCounter = document.querySelector('.character-counter');
        const submitButton = form?.querySelector('button[type="submit"]') as HTMLButtonElement;

        // =====================
        // FUNCIONES DE MODAL - Siguiendo el patrón de Modal.astro
        // =====================
        
        // Función para abrir modal
        function openModal(modalId: string) {
            const modal = document.getElementById(modalId);
            if (modal) {
                modal.classList.add('active');
                document.body.style.overflow = 'hidden'; // Prevenir scroll del body
            }
        }

        // Función para cerrar modal
        function closeModal(modal: HTMLElement) {
            modal.classList.remove('active');
            document.body.style.overflow = ''; // Restaurar scroll del body
        }

        // Función para cerrar todos los modales
        function closeAllModals() {
            const activeModals = document.querySelectorAll('.success-modal.active, .error-modal.active');
            activeModals.forEach(modal => closeModal(modal as HTMLElement));
        }

        // Event listeners para botones de cerrar (X)
        document.addEventListener('click', (e) => {
            const target = e.target as HTMLElement;
            
            // Botón de cerrar (X)
            if (target.classList.contains('success-modal__close') || target.classList.contains('error-modal__close')) {
                e.preventDefault();
                const modal = target.closest('.success-modal, .error-modal');
                if (modal) {
                    closeModal(modal as HTMLElement);
                }
            }
            
            // Botones principales de modal
            if (target.id === 'successModalBtn' || target.id === 'errorModalBtn') {
                e.preventDefault();
                const modal = target.closest('.success-modal, .error-modal');
                if (modal) {
                    closeModal(modal as HTMLElement);
                }
            }
        });

        // Cerrar modal al hacer click fuera del contenido
        document.addEventListener('click', (e) => {
            const target = e.target as HTMLElement;
            if (target.classList.contains('success-modal') || target.classList.contains('error-modal')) {
                closeModal(target);
            }
        });

        // Cerrar modal con la tecla Escape
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
                closeAllModals();
            }
        });

        // =====================
        // FUNCIONALIDAD DEL FORMULARIO
        // =====================

        // Contador de caracteres
        if (messageTextarea && currentCount) {
            const maxLength = 1500;

            function updateCharacterCount() {
                const currentLength = messageTextarea.value.length;
                if (currentCount) {
                    currentCount.textContent = currentLength.toString();
                }

                // Cambiar color según el progreso
                if (characterCounter) {
                    characterCounter.classList.remove('warning', 'error');
                    
                    if (currentLength > maxLength * 0.9) {
                        characterCounter.classList.add('warning');
                    }
                    if (currentLength > maxLength) {
                        characterCounter.classList.add('error');
                    }
                }
            }

            // Limitar caracteres
            messageTextarea.addEventListener('input', (e) => {
                const target = e.target as HTMLTextAreaElement;
                if (target.value.length > maxLength) {
                    target.value = target.value.substring(0, maxLength);
                }
                updateCharacterCount();
            });

            // Inicializar contador
            updateCharacterCount();
        }

        // Validación en tiempo real
        const inputs = form?.querySelectorAll('.form-input');
        inputs?.forEach(input => {
            input.addEventListener('blur', () => {
                validateField(input as HTMLInputElement);
            });

            input.addEventListener('input', () => {
                clearErrors(input as HTMLInputElement);
            });
        });

        // Función de validación individual
        function validateField(field: HTMLInputElement) {
            const formGroup = field.closest('.form-group');
            const value = field.value.trim();
            let isValid = true;
            let errorMessage = '';

            // Limpiar errores previos
            clearErrors(field);

            // Validaciones específicas
            switch (field.type) {
                case 'email':
                    if (value && !isValidEmail(value)) {
                        isValid = false;
                        errorMessage = 'Por favor ingresa un correo electrónico válido';
                    }
                    break;
                case 'tel':
                    if (value && !isValidPhone(value)) {
                        isValid = false;
                        errorMessage = 'Por favor ingresa un número de teléfono válido';
                    }
                    break;
            }

            // Campos requeridos
            if (field.required && !value) {
                isValid = false;
                errorMessage = 'Este campo es requerido';
            }

            // Aplicar estilos de validación
            if (formGroup) {
                if (isValid && value) {
                    formGroup.classList.add('success');
                    formGroup.classList.remove('error');
                } else if (!isValid) {
                    formGroup.classList.add('error');
                    formGroup.classList.remove('success');
                    showError(field, errorMessage);
                }
            }

            return isValid;
        }

        // Mostrar mensaje de error
        function showError(field: HTMLInputElement, message: string) {
            const formGroup = field.closest('.form-group');
            if (formGroup) {
                let errorElement = formGroup.querySelector('.error-message');
                if (!errorElement) {
                    errorElement = document.createElement('span');
                    errorElement.classList.add('error-message');
                    formGroup.appendChild(errorElement);
                }
                errorElement.textContent = message;
            }
        }

        // Limpiar errores
        function clearErrors(field: HTMLInputElement) {
            const formGroup = field.closest('.form-group');
            if (formGroup) {
                formGroup.classList.remove('error', 'success');
                const errorElement = formGroup.querySelector('.error-message');
                if (errorElement) {
                    errorElement.remove();
                }
            }
        }

        // Validadores
        function isValidEmail(email: string): boolean {
            const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            return emailRegex.test(email);
        }

        function isValidPhone(phone: string): boolean {
            const phoneRegex = /^[\+]?[0-9\s\-\(\)]+$/;
            return phoneRegex.test(phone) && phone.replace(/\D/g, '').length >= 8;
        }

        // Manejo del envío del formulario con Make.com
        if (form && submitButton) {
            form.addEventListener('submit', async (e) => {
                e.preventDefault();

                // Validar todos los campos
                let isFormValid = true;
                const requiredFields = ['name', 'email', 'message'];
                
                requiredFields.forEach(fieldName => {
                    const field = form.querySelector(`[name="${fieldName}"]`) as HTMLInputElement;
                    if (!field || !validateField(field)) {
                        isFormValid = false;
                    }
                });

                if (isFormValid) {
                    // Mostrar estado de loading
                    submitButton.classList.add('loading');
                    submitButton.disabled = true;

                    try {
                        // Preparar datos para envío
                        const formData = new FormData(form);
                        const data = {
                            name: formData.get('name'),
                            email: formData.get('email'),
                            phone: formData.get('phone'),
                            message: formData.get('message'),
                            timestamp: new Date().toISOString(),
                            source: 'landing-page-gabrielzavando'
                        };

                        let response;
                        
                        if (TEST_MODE) {
                            // Simular respuesta exitosa en modo test
                            response = {
                                ok: true,
                                json: async () => ({ success: true, message: 'Mensaje enviado correctamente (modo test)' })
                            };
                            // Simular delay de red
                            await new Promise(resolve => setTimeout(resolve, 1000));
                        } else {
                            // Envío real a Make.com
                            const formBody = new URLSearchParams();
                            Object.entries(data).forEach(([key, value]) => {
                                formBody.append(key, String(value));
                            });
                            
                            response = await fetch(MAKE_WEBHOOK_URL, {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/x-www-form-urlencoded',
                                },
                                body: formBody.toString()
                            });
                        }

                        if (response.ok) {
                            // Mostrar modal de éxito
                            openModal('successModal');
                            form.reset();
                            
                            // Limpiar estados
                            inputs?.forEach(input => clearErrors(input as HTMLInputElement));
                            if (currentCount) currentCount.textContent = '0';
                            if (characterCounter) characterCounter.classList.remove('warning', 'error');
                        } else {
                            throw new Error(`Error ${response.status}: ${response.statusText}`);
                        }
                    } catch (error) {
                        console.error('Error al enviar:', error);
                        // Mostrar modal de error
                        openModal('errorModal');
                    } finally {
                        // Remover loading
                        submitButton.classList.remove('loading');
                        submitButton.disabled = false;
                    }
                }
            });
        }
    });
</script>
