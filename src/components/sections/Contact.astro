---
import ModalMessage from "../shared/ModalMessage.astro";

// Leer la variable de entorno en el servidor (frontmatter)
const API_BASE_URL = import.meta.env.PUBLIC_API_BASE_URL || "https://api-agencia-201828783555.southamerica-west1.run.app";
---

<section class="contact" id="contact">
  <div class="contact__container">
    <h2 class="title-section">Contacto</h2>
    <p class="contact__subtitle">
      ¿Tienes un proyecto en mente? Cuéntame sobre él
    </p>

    <form class="contact-form" id="contactForm" novalidate>
      <!-- BACKEND: Este formulario envía los datos a tu API NestJS (POST /forms/contact).
              Contrato JSON: { name, email, phone?, message, meta: { userAgent, referrer, page, ts } }
              Recomendaciones: rate limiting, validación y sanitización server-side, y CAPTCHA opcional. -->
      <div class="form-group">
        <label for="name" class="form-label">Nombre completo *</label>
        <input
          type="text"
          id="name"
          name="name"
          class="form-input"
          required
          placeholder="¿Cómo te llamas?"
        />
      </div>

      <div class="form-group">
        <label for="email" class="form-label">Correo electrónico *</label>
        <input
          type="email"
          id="email"
          name="email"
          class="form-input"
          required
          placeholder="tu@correo.com"
        />
      </div>

      <div class="form-group">
        <label for="phone" class="form-label">Teléfono (opcional)</label>
        <input
          type="tel"
          id="phone"
          name="phone"
          class="form-input"
          placeholder="+56 9 XXXX XXXX"
        />
      </div>

      <div class="form-group">
        <label for="message" class="form-label">Mensaje *</label>
        <textarea
          id="message"
          name="message"
          class="form-input form-textarea"
          required
          placeholder="Cuéntame sobre tu proyecto..."></textarea>
        <div class="character-counter">
          <span id="currentCount">0</span>
          <span>/</span>
          <span>1500 caracteres</span>
        </div>
      </div>

      <!-- Honeypot anti-spam (debe permanecer vacío) -->
      <div style="display:none;visibility:hidden;height:0;overflow:hidden;">
        <label>Tu sitio web (no completar)</label>
        <input type="text" name="website" tabindex="-1" autocomplete="off" />
      </div>

      <!-- Campos ocultos: ninguno requerido por la API actual (se mantiene solo el honeypot anti-spam) -->

      <button type="submit" class="btn-cta__solid"> Enviar mensaje </button>
    </form>
  </div>
</section>

<!-- Inyectar configuración del servidor al cliente -->
<script define:vars={{ apiBaseUrl: API_BASE_URL }}>
  // Hacer disponible la configuración globalmente
  window.__CONTACT_CONFIG = {
    API_BASE_URL: apiBaseUrl
  };
</script>

<!-- Modales de éxito y error -->
<ModalMessage
  id="successModal"
  type="success"
  title="¡Mensaje Enviado!"
  message="Gracias por contactarme. He recibido tu mensaje y me pondré en contacto contigo lo antes posible."
/>

<ModalMessage
  id="errorModal"
  type="error"
  title="Error al Enviar"
  message="Lo siento, ha ocurrido un error al enviar tu mensaje. Por favor, inténtalo de nuevo o contáctame directamente."
/><style lang="scss">
  @use "../../styles/config" as *;

  .contact {
    padding: var(--space-2xl) 0; /* más espacio vertical según sugerencia */
    background-color: var(--contact-bg, var(--color-surface));
    border-top: 1px solid var(--contact-border, transparent);
  }

  /* Themed variables locales para inputs, tarjetas y spinner */
  html[data-theme="light"] .contact {
    --card-bg: var(--color-white);
    --input-bg: var(--color-white);
    --input-border: var(
      --color-secondary
    ); /* usar color secondary en modo claro */
    --input-text: var(--color-input-text);
    --input-focus-shadow: rgba(var(--color-primary-rgb, 255, 0, 128), 0.1);
    --placeholder: var(--color-text-muted);
    --btn-spinner-color: var(--color-white);
    --error-shadow: rgba(var(--color-error-rgb, 239, 68, 68), 0.12);
    --success-shadow: rgba(var(--color-success-rgb, 16, 185, 129), 0.12);
    --contact-bg: var(--color-background); /* más contraste en light */
    --contact-border: var(--color-border);
  }

  html[data-theme="dark"] .contact {
    --card-bg: var(--color-surface);
    --input-bg: var(--color-surface-secondary);
    --input-border: var(--color-border-secondary);
    --input-text: var(
      --color-text
    ); /* texto claro en inputs para mejor contraste en dark */
    --input-focus-shadow: rgba(var(--color-primary-rgb, 255, 0, 128), 0.14);
    --placeholder: rgba(var(--color-text, 249, 250, 251), 0.56);
    --btn-spinner-color: var(--color-surface);
    --error-shadow: rgba(var(--color-error-rgb, 239, 68, 68), 0.18);
    --success-shadow: rgba(var(--color-success-rgb, 16, 185, 129), 0.18);
    --contact-bg: var(--color-background);
    --contact-border: var(--color-border-secondary);
  }

  .contact__container {
    // Container usando el nuevo sistema
    width: 100%;
    max-width: #{container(max)};
    margin: 0 auto;
    padding: 0 var(--padding-container);
    text-align: center;
  }

  .contact__subtitle {
    color: var(--color-text-secondary);
    font-size: 1.125rem;
    line-height: 1.6;
    margin-bottom: var(--space-xl);
    max-width: 600px;
    margin-left: auto;
    margin-right: auto;
  }

  // Formulario de contacto
  .contact-form {
    max-width: 600px;
    margin: 0 auto;
    text-align: left;

    @include respond-to(xs) {
      width: 100%;
      max-width: 75%; // Mismo ancho que las tarjetas de planes desde 480px
    }

    @media (min-width: #{container(narrow)}) {
      max-width: 600px; // Volver al ancho original en desktop
    }
  }

  .form-group {
    margin-bottom: var(--space-lg);
    position: relative;
  }

  .form-label {
    display: block;
    font-family: var(--font-headings);
    font-weight: 600;
    color: var(--color-text);
    margin-bottom: var(--space-sm);
    font-size: 0.9rem;
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  .form-input {
    width: 100%;
    padding: var(--space-md);
    border: 1px solid var(--input-border);
    border-radius: 0; // Flat design
    background: var(--input-bg);
    font-family: var(--font-primary);
    font-size: 1rem;
    color: var(--input-text, var(--color-input-text));
    transition: all var(--transition-normal) ease;
    outline: none;

    &::placeholder {
      color: var(--placeholder);
      opacity: 0.9;
    }

    &:focus {
      border-color: var(--color-primary);
      box-shadow: 0 0 0 3px var(--input-focus-shadow);
    }

    &:invalid:not(:placeholder-shown) {
      border-color: var(--color-error, #dc2626);
    }

    &:valid:not(:placeholder-shown) {
      border-color: var(--color-success, #059669);
    }
  }

  .form-textarea {
    min-height: 120px;
    resize: vertical;
    font-family: var(--font-primary);
    line-height: 1.5;
  }

  // Contador de caracteres
  .character-counter {
    text-align: right;
    margin-top: var(--space-xs);
    font-size: 0.8rem;
    color: var(--color-text-muted);
    font-family: var(--font-primary);

    #currentCount {
      font-weight: 600;
      color: var(--color-text-secondary);
    }

    &.warning #currentCount {
      color: var(--color-warning, #f59e0b);
    }

    &.error #currentCount {
      color: var(--color-error, #dc2626);
    }
  }

  // Botón de envío
  .contact-form .btn-cta__solid {
    width: 100%;
    margin-top: var(--space-2xl); /* mayor separación antes del botón */
    padding: var(--space-md) var(--space-lg);
    font-size: 1.1rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    position: relative;
    overflow: hidden;

    &:disabled {
      opacity: 0.6;
      cursor: not-allowed;
      filter: grayscale(0.2);
    }

    &:hover:not(:disabled) {
      transform: translateY(-2px);
    }

    // Efecto de loading
    &.loading {
      color: transparent;

      &::after {
        content: "";
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        width: 20px;
        height: 20px;
        border: 2px solid transparent;
        border-top: 2px solid var(--btn-spinner-color);
        border-radius: 50%;
        animation: spin 1s linear infinite;
      }
    }
  }

  // Animación de loading
  @keyframes spin {
    0% {
      transform: translate(-50%, -50%) rotate(0deg);
    }
    100% {
      transform: translate(-50%, -50%) rotate(360deg);
    }
  }

  // Estados de validación visual
  .form-group.error .form-input {
    border-color: var(--color-error, #dc2626);
    box-shadow: 0 0 0 3px var(--error-shadow);
  }

  .form-group.success .form-input {
    border-color: var(--color-success, #059669);
    box-shadow: 0 0 0 3px var(--success-shadow);
  }

  // Mensajes de error
  span.error-message {
    border: 1px solid #ef4444 !important;
    font-size: 0.8rem;
    margin-top: var(--space-xs);
    display: block;
    font-family: var(--font-primary);
  }

  // Responsive design - Solo para inputs más pequeños en móvil
  @media (max-width: #{container(narrow)}) {
    .form-input {
      padding: var(--space-sm);
    }

    .contact-form .btn-cta__solid {
      padding: var(--space-sm) var(--space-md);
      font-size: 1rem;
    }
  }
</style>

<script type="module">
  // CONFIG API - Usar configuración inyectada desde el servidor
  function getAPIBaseURL() {
    // 1. Configuración inyectada desde Astro (frontmatter)
    if (window.__CONTACT_CONFIG && window.__CONTACT_CONFIG.API_BASE_URL) {
      return window.__CONTACT_CONFIG.API_BASE_URL;
    }
    
    // 2. Runtime config (para deploys estáticos)
    if (window.__APP_CONFIG && window.__APP_CONFIG.PUBLIC_API_BASE_URL) {
      return window.__APP_CONFIG.PUBLIC_API_BASE_URL;
    }
    
    // 3. Fallback
    return "https://api-agencia-201828783555.southamerica-west1.run.app";
  }

  const API_BASE_URL = getAPIBaseURL().replace(/\/$/, "");
  const CONTACT_ENDPOINT = "/forms/contact";
  const API_URL = `${API_BASE_URL}${CONTACT_ENDPOINT}`;


  // Flag de desarrollo para simulación
  const DEV_SIMULATION = API_BASE_URL.includes("localhost");
  
  // Simula respuesta en modo desarrollo si no hay backend
  const REQUEST_TIMEOUT_MS = 10000;
  const HONEYPOT_FIELD = "website";

  // Utilidad timeout fetch con soporte AbortController
  function fetchWithTimeout(resource, options = {}) {
    const { timeout = REQUEST_TIMEOUT_MS, signal } = options;
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort("timeout"), timeout);
    // Permitir señal externa además del timeout interno
    if (signal) {
      signal.addEventListener("abort", () => controller.abort(signal.reason), {
        once: true,
      });
    }
    return fetch(resource, { ...options, signal: controller.signal }).finally(
      () => clearTimeout(timeoutId)
    );
  }

  // Retry con backoff exponencial básico (1 reintento)
  async function fetchWithRetry(url, options = {}, retries = 1) {
    try {
      return await fetchWithTimeout(url, options);
    } catch (err) {
      if (
        retries > 0 &&
        (err?.name === "AbortError" ||
          err?.message === "Failed to fetch" ||
          err?.message === "timeout")
      ) {
        await new Promise((r) => setTimeout(r, 600));
        return fetchWithRetry(url, options, retries - 1);
      }
      throw err;
    }
  }

  document.addEventListener("DOMContentLoaded", () => {
    const form = document.getElementById("contactForm");
    const messageTextarea = document.getElementById("message");
    const currentCount = document.getElementById("currentCount");
    const characterCounter = document.querySelector(".character-counter");
    const submitButton = form?.querySelector('button[type="submit"]');
    const DEBUG =
      typeof window !== "undefined" &&
      window.location.search.includes("debug=1");
    let inFlightController = null;

    // =====================
    // FUNCIONES DE MODAL - Usando window.modalHelpers del componente ModalMessage
    // =====================

    // Funciones helper que usan window.modalHelpers global
    function openModal(modalId) {
      if (typeof window !== "undefined" && window.modalHelpers) {
        window.modalHelpers.openModal(modalId);
      }
    }

    function updateModalMessage(modalId, newMessage) {
      if (typeof window !== "undefined" && window.modalHelpers) {
        window.modalHelpers.updateModalMessage(modalId, newMessage);
      }
    }

    // =====================
    // FUNCIONALIDAD DEL FORMULARIO
    // =====================

    // Autoresize y contador de caracteres
    if (messageTextarea && currentCount) {
      const maxLength = 1500;

      function updateCharacterCount() {
        const currentLength = messageTextarea.value.length;
        if (currentCount) {
          currentCount.textContent = currentLength.toString();
        }
        // Autoresize
        messageTextarea.style.height = "auto";
        messageTextarea.style.height =
          Math.min(messageTextarea.scrollHeight, 600) + "px";

        // Cambiar color según el progreso
        if (characterCounter) {
          characterCounter.classList.remove("warning", "error");

          if (currentLength > maxLength * 0.9) {
            characterCounter.classList.add("warning");
          }
          if (currentLength > maxLength) {
            characterCounter.classList.add("error");
          }
        }
      }

      // Limitar caracteres
      messageTextarea.addEventListener("input", (e) => {
        const target = e.target;
        if (target.value.length > maxLength) {
          target.value = target.value.substring(0, maxLength);
        }
        updateCharacterCount();
      });

      // Inicializar contador
      updateCharacterCount();
    }

    // Validación en tiempo real
    const inputs = form?.querySelectorAll(".form-input");
    inputs?.forEach((input) => {
      input.addEventListener("blur", () => {
        validateField(input);
      });

      input.addEventListener("input", () => {
        clearErrors(input);
        // Activar/desactivar botón según validez mínima
        if (submitButton && form) {
          const nameOk = !!form.querySelector('[name="name"]').value.trim();
          const emailEl = form.querySelector('[name="email"]').value.trim();
          const emailOk = !!emailEl && isValidEmail(emailEl);
          const msgOk = !!form.querySelector('[name="message"]').value.trim();
          submitButton.disabled = !(nameOk && emailOk && msgOk);
        }
      });
    });

    // Inicialmente deshabilitar hasta que sea válido (mejor UX)
    if (submitButton) submitButton.disabled = true;

    // Función de validación individual
    function validateField(field) {
      const formGroup = field.closest(".form-group");
      const value = field.value.trim();
      let isValid = true;
      let errorMessage = "";

      // Limpiar errores previos
      clearErrors(field);

      // Validaciones específicas
      switch (field.type) {
        case "email":
          if (value && !isValidEmail(value)) {
            isValid = false;
            errorMessage = "Por favor ingresa un correo electrónico válido";
          }
          break;
        case "tel":
          if (value && !isValidPhone(value)) {
            isValid = false;
            errorMessage = "Por favor ingresa un número de teléfono válido";
          }
          break;
      }

      // Campos requeridos
      if (field.required && !value) {
        isValid = false;
        errorMessage = "Este campo es requerido";
      }

      // Aplicar estilos de validación
      if (formGroup) {
        if (isValid && value) {
          formGroup.classList.add("success");
          formGroup.classList.remove("error");
        } else if (!isValid) {
          formGroup.classList.add("error");
          formGroup.classList.remove("success");
          showError(field, errorMessage);
        }
      }

      return isValid;
    }

    // Mostrar mensaje de error
    function showError(field, message) {
      const formGroup = field.closest(".form-group");
      if (formGroup) {
        let errorElement = formGroup.querySelector(".error-message");
        if (!errorElement) {
          errorElement = document.createElement("span");
          errorElement.classList.add("error-message");
          // Añadimos inline style para forzar visibilidad si la cascada CSS lo sobreescribe
          errorElement.style.color = '#ef4444';
          formGroup.appendChild(errorElement);
        }
        errorElement.textContent = message;
      }
    }

    // Limpiar errores
    function clearErrors(field) {
      const formGroup = field.closest(".form-group");
      if (formGroup) {
        formGroup.classList.remove("error", "success");
        const errorElement = formGroup.querySelector(".error-message");
        if (errorElement) {
          errorElement.remove();
        }
      }
    }

    // Validadores
    function isValidEmail(email) {
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      return emailRegex.test(email);
    }

    function isValidPhone(phone) {
      const phoneRegex = /^[\+]?[0-9\s\-\(\)]+$/;
      return phoneRegex.test(phone) && phone.replace(/\D/g, "").length >= 8;
    }

    // Manejo del envío del formulario hacia la API NestJS
    if (form && submitButton) {
      form.addEventListener("submit", async (e) => {
        e.preventDefault();

        if (!navigator.onLine) {
          console.warn("Sin conexión a Internet.");
          openModal("errorModal");
          return;
        }

        // Honeypot
        const honey = form.querySelector(`[name="${HONEYPOT_FIELD}"]`);
        if (honey && honey.value) {
          // Bot sospechoso: abortar silenciosamente
          return;
        }

        // Validación campos requeridos
        let isFormValid = true;
        const requiredFields = ["name", "email", "message"];
        requiredFields.forEach((fieldName) => {
          const field = form.querySelector(`[name="${fieldName}"]`);
          if (!field || !validateField(field)) {
            isFormValid = false;
          }
        });
        if (!isFormValid) return;

        submitButton.classList.add("loading");
        submitButton.disabled = true;

        // Cancelar petición previa si hubiera
        if (inFlightController) {
          try {
            inFlightController.abort("new-submit");
          } catch (_) {}
        }
        inFlightController = new AbortController();

        try {
          const formData = new FormData(form);
          const payload = {
            name: String(formData.get("name") || "").trim(),
            email: String(formData.get("email") || "").trim(),
            phone: String(formData.get("phone") || "").trim() || null,
            message: String(formData.get("message") || "").trim(),
            meta: {
              userAgent: navigator.userAgent,
              referrer: document.referrer || null,
              page: window.location.pathname,
              ts: new Date().toISOString(),
            },
          };


          let response;
          if (!API_BASE_URL && DEV_SIMULATION) {
            // Simulación local sin backend
            await new Promise((r) => setTimeout(r, 800));
            response = {
              ok: true,
              status: 200,
              json: async () => ({ success: true, simulated: true }),
            };
          } else {
            response = await fetchWithRetry(API_URL, {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
                Accept: "application/json",
              },
              body: JSON.stringify(payload),
              timeout: REQUEST_TIMEOUT_MS,
              signal: inFlightController.signal,
            });
          }

          // LOG: Mostrar respuesta del backend

          if (response.ok) {
            // Intentar leer la respuesta JSON
            try {
              await response.json();
            } catch (jsonError) {
              /* noop */
            }
            openModal("successModal");
            form.reset();
            inputs?.forEach((input) => clearErrors(input));
            if (currentCount) currentCount.textContent = "0";
            if (characterCounter)
              characterCounter.classList.remove("warning", "error");
            if (submitButton) submitButton.disabled = true; // hasta que se vuelva a llenar
          } else {
            // Intentar leer mensaje de error del backend
            try {
              const errorData = await response.json();
              if (errorData?.message) {
                updateModalMessage("errorModal", String(errorData.message));
              }
            } catch (jsonError) {
              /* noop */
            }
            openModal("errorModal");
          }
        } catch (err) {
          
          // Mensaje de error más específico
          let errorMessage = "No se pudo enviar el formulario. Inténtalo nuevamente en unos segundos.";
          
          if (err?.name === "AbortError") {
            errorMessage = "La solicitud fue cancelada o expiró. Intenta nuevamente.";
          } else if (!navigator.onLine) {
            errorMessage = "Sin conexión a Internet. Revisa tu red e intenta de nuevo.";
          } else if (err?.name === "TypeError" && err?.message?.includes("Failed to fetch")) {
            errorMessage = "Error de conexión. Verifica que la API esté disponible y que no hay problemas de CORS.";
          } else if (err?.message) {
            errorMessage = `Error: ${err.message}`;
          }
          
          updateModalMessage("errorModal", errorMessage);
          openModal("errorModal");
        } finally {
          submitButton.classList.remove("loading");
          submitButton.disabled = false;
          inFlightController = null;
        }
      });
    }
  });
</script>
