---
import menuData from "../../data/menu.json";
import ModalMessage from "./ModalMessage.astro";

const currentYear = new Date().getFullYear();
const { menuItems, socialLinks } = menuData;
---

<footer class="footer">
  <div class="footer__container">
    <!-- Navegación -->
    <div class="footer__section footer__section--nav">
      <h3 class="footer__title">Navegación</h3>
      <ul class="footer__list">
        {menuItems.map(item => (
          <li class="footer__item"><a href={item.href} class="footer__link">{item.text}</a></li>
        ))}
      </ul>
    </div>

    <!-- Redes sociales -->
    <div class="footer__section footer__section--social">
      <h3 class="footer__title">Conecta conmigo</h3>
      <div class="footer__social-icons">
      {socialLinks.map(link => (
        <a 
        href={link.url} 
        class="footer__icon" 
        title={link.name} 
        aria-label={link.name} 
        target="_blank" 
        rel="noopener"
        >
        <i class={link.icon}></i>
        </a>
      ))}
      </div>
    </div>

    <!-- Suscripción -->
    <div class="footer__section footer__section--subscribe">
      <h3 class="footer__title">Suscríbete</h3>
      <!-- BACKEND: Este formulario envía los datos a tu API NestJS (POST /forms/subscribe) con JSON { email, meta }. -->
      <form class="footer__form" id="subscribeForm" novalidate>
        
        <div class="footer__form-group">
          <input 
            type="email" 
            class="footer__input" 
            name="email" 
            placeholder="Tu correo electrónico" 
            required
            id="subscribeEmail"
          >
        </div>

        <!-- Honeypot anti-spam (debe permanecer vacío) -->
        <div style="display:none;visibility:hidden;height:0;overflow:hidden;">
          <label>Tu sitio web (no completar)</label>
          <input type="text" name="website" tabindex="-1" autocomplete="off" />
        </div>

        <div class="footer__form-group">
          <label class="footer__checkbox">
            <input type="checkbox" name="terms" required id="subscribeTerms">
            <span class="footer__checkbox-custom"></span>
            <span class="footer__checkbox-text">
              Acepto la <a href="/politica-de-privacidad" class="footer__link">Política de privacidad</a>
            </span>
          </label>
        </div>
        <button type="submit" class="btn-cta__solid footer__submit-btn">
          Suscribirme
        </button>
      </form>
      <p class="footer__note">Recibe tips de transformación digital sin spam.</p>
    </div>
  </div>

  <!-- Cierre del footer -->
  <div class="footer__bottom">
    <p class="footer__legal">
      <a href="/politica-de-privacidad" class="footer__link">Política de privacidad</a>
    </p>
    <p class="footer__copyright">© {currentYear} Gabriel Zavando. Todos los derechos reservados.</p>
  </div>
</footer>

<style lang="scss">
  @use '../../styles/config' as *;

  .footer {
    background-color: var(--color-dark);
    color: var(--color-white);
    padding: #{space(2xl)} 0 #{space(lg)} 0;
    margin-top: auto;

    &__container {
      @include container();
      padding: 0 var(--padding-container);
      display: grid;
      gap: var(--space-lg);
      align-items: start;
      
      // Mobile first: 1 columna, disposición vertical
      grid-template-columns: 1fr;
      grid-template-areas: 
        "nav"
        "social" 
        "subscribe";

      @include respond-to(xs) {
        // Tablet: 2 columnas, navegación a la izquierda, social y subscribe apilados a la derecha
        grid-template-columns: 1fr 1fr;
        grid-template-areas: 
          "nav social"
          "nav subscribe";
      }

      @include respond-to(md) {
        // Desktop: 3 columnas iguales, cada sección en su propia columna
        grid-template-columns: 1fr 1fr 1fr;
        grid-template-areas: "nav social subscribe";
        gap: #{space(xl)};
      }
    }

    &__section {
      margin-bottom: 0; // Removemos margin porque Grid maneja el spacing

      &--nav {
        grid-area: nav;
        min-width: 200px;

        @include respond-to(md) {
          margin-right: 0; // Grid maneja el spacing
          min-width: auto; // Sin restricción de ancho mínimo
        }
      }

      &--social {
        grid-area: social;
        
        @include respond-to(xs) {
          margin-bottom: var(--space-md); // Pequeño margen entre social y subscribe en 2 columnas
        }

        @include respond-to(md) {
          margin-bottom: 0;
          margin-right: 0; // Grid maneja el spacing
        }
      }

      &--subscribe {
        grid-area: subscribe;

        @include respond-to(md) {
          max-width: none; // Sin restricción de ancho máximo
          justify-self: start; // Alinea a la izquierda en desktop
        }
      }
    }

    &__title {
      font-family: var(--font-headings);
      font-size: 1.25rem;
      font-weight: 600;
      color: var(--color-white);
      margin-bottom: #{space(md)};
      border-bottom: 2px solid var(--color-primary);
      padding-bottom: #{space(sm)};
      display: inline-block;
    }

    &__list {
      list-style: none;
      padding: 0;
      margin: 0;
    }

    &__item {
      margin-bottom: #{space(sm)};
    }

    &__link {
      color: var(--color-text-secondary);
      text-decoration: none;
      transition: color 0.3s ease;

      &:hover {
        color: var(--color-primary);
      }

      &:focus-visible {
        outline: 2px solid var(--color-primary);
        outline-offset: 2px;
        border-radius: 2px;
      }
    }

    &__social-icons {
      @include flex(row, flex-start, center, wrap, md);
    }

    &__icon {
      @include flex(row, center, center);
      width: 40px;
      height: 40px;
      background-color: transparent;
      border-radius: 50%;
      color: var(--color-white);
      font-size: 1.5rem;
      transition: all var(--transition-normal) ease;

      &:hover {
        color: var(--color-secondary);
        transform: translateY(-2px);
      }

      &:focus-visible {
        outline: 2px solid var(--color-primary);
        outline-offset: 2px;
      }

      i {
        font-size: inherit;
      }
    }

    &__form {
      @include flex(column, flex-start, stretch, nowrap, sm);
    }

    &__form-group {
      margin-bottom: var(--space-sm);
    }

    &__input {
      width: 100%;
      padding: var(--space-sm) var(--space-md);
      border: 2px solid var(--color-border);
      border-radius: 0; // Flat design
      background-color: var(--color-surface);
      color: var(--color-text);
      font-size: 0.875rem;
      font-family: var(--font-primary);
      transition: all var(--transition-normal) ease;
      outline: none;

      &::placeholder {
        color: var(--color-text-muted);
        opacity: 0.7;
      }

      &:focus {
        border-color: var(--color-primary);
        box-shadow: 0 0 0 3px rgba(var(--color-primary-rgb, 255, 0, 128), 0.1);
      }

      &:invalid:not(:placeholder-shown) {
        border-color: var(--color-error, #dc2626);
      }

      &:valid:not(:placeholder-shown) {
        border-color: var(--color-success, #059669);
      }
    }

    &__checkbox {
      @include flex(row, flex-start, flex-start, nowrap, sm);
      font-size: 0.75rem;
      color: var(--color-text-secondary);
      line-height: 1.4;
      cursor: pointer;
      position: relative;

      input[type="checkbox"] {
        position: absolute;
        opacity: 0;
        width: 0;
        height: 0;
      }

      &-custom {
        width: 16px;
        height: 16px;
        border: 2px solid var(--color-border);
        border-radius: 0; // Cuadrado flat
        background-color: var(--color-surface);
        margin-right: var(--space-sm);
        flex-shrink: 0;
        margin-top: 2px;
        position: relative;
        transition: all var(--transition-normal) ease;

        &::after {
          content: '';
          position: absolute;
          left: 4px;
          top: 1px;
          width: 4px;
          height: 8px;
          border: solid var(--color-white);
          border-width: 0 2px 2px 0;
          transform: rotate(45deg);
          opacity: 0;
          transition: opacity var(--transition-normal) ease;
        }
      }

      &-text {
        flex: 1;
      }

      input[type="checkbox"]:checked + &-custom {
        background-color: var(--color-primary);
        border-color: var(--color-primary);

        &::after {
          opacity: 1;
        }
      }

      input[type="checkbox"]:focus + &-custom {
        outline: 2px solid var(--color-primary);
        outline-offset: 2px;
      }

      &:hover &-custom {
        border-color: var(--color-primary);
      }
    }

    &__submit-btn {
      margin-top: var(--space-sm);
      position: relative;
      overflow: hidden;

      &:disabled {
        opacity: 0.6;
        cursor: not-allowed;
      }

      &:hover:not(:disabled) {
        transform: translateY(-1px);
      }

      // Efecto de loading
      &.loading {
        color: transparent;

        &::after {
          content: '';
          position: absolute;
          top: 50%;
          left: 50%;
          transform: translate(-50%, -50%);
          width: 16px;
          height: 16px;
          border: 2px solid transparent;
          border-top: 2px solid var(--color-white);
          border-radius: 50%;
          animation: spin 1s linear infinite;
        }
      }
    }

    &__note {
      font-size: 0.75rem;
      color: var(--color-text-muted);
      line-height: 1.4;
    }

    &__bottom {
      @include container();
      @include flex(column, center, center, nowrap, md);
      border-top: 1px solid var(--color-border);
      padding-top: #{space(lg)};
      margin-top: #{space(xl)};
      text-align: center;
    }

    &__legal {
      font-size: 0.9rem;
      color: var(--color-white);
      margin: 0 0 #{space(md)} 0;
      font-weight: 500;

      a.footer__link {
        color: var(--color-white);
        font-size: inherit;
        font-weight: inherit;

        &:hover {
          color: var(--color-primary);
        }
      }
    }

    &__copyright {
      font-size: 0.875rem;
      color: var(--color-text-secondary);
      margin: 0;
    }
  }

  // Estilos para el botón CTA - Flat design para toda la landing
  .btn-cta__solid {
    background-color: var(--color-primary);
    color: var(--color-white);
    border: none;
    padding: #{space(sm)} #{space(lg)};
    border-radius: 0; // Flat design para toda la landing
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;

    &:hover {
      background-color: var(--color-secondary);
      transform: translateY(-1px);
    }

    &:focus-visible {
      outline: 2px solid var(--color-white);
      outline-offset: 2px;
    }

    &:active {
      transform: translateY(0);
    }
  }

  // Animación de loading
  @keyframes spin {
    0% { transform: translate(-50%, -50%) rotate(0deg); }
    100% { transform: translate(-50%, -50%) rotate(360deg); }
  }

  // Estados de validación del formulario de suscripción
  .footer__form-group.error .footer__input {
    border-color: var(--color-error, #dc2626);
    box-shadow: 0 0 0 3px rgba(220, 38, 38, 0.1);
  }

  .footer__form-group.success .footer__input {
    border-color: var(--color-success, #059669);
    box-shadow: 0 0 0 3px rgba(5, 150, 105, 0.1);
  }

  // Mensajes de error para el formulario de suscripción
  .footer__error-message {
    color: var(--color-error, #dc2626);
    font-size: 0.7rem;
    margin-top: var(--space-xs);
    display: block;
    font-family: var(--font-primary);
  }

  /* En tema claro, los links de navegación del footer serán blancos */
  :root[data-theme="light"] .footer__section--nav .footer__item .footer__link {
    color: var(--color-footer-link-light);

    &:hover,
    &:focus-visible {
      color: var(--color-primary);
    }
  }
</style>

<!-- Modales de éxito y error (newsletter) -->
<ModalMessage 
  id="subscribeSuccessModal"
  type="success"
  title="¡Suscripción exitosa!"
  message="Te has suscrito correctamente. Pronto recibirás consejos de transformación digital."
/>

<ModalMessage 
  id="subscribeErrorModal"
  type="error"
  title="Error en la suscripción"
  message="Ocurrió un problema al suscribirte. Intenta nuevamente más tarde."
/>

<ModalMessage 
  id="subscribeInfoModal"
  type="info"
  title="Ya estás suscrito"
  message="El correo ya está suscrito a nuestro newsletter."
/>

<script type="module">
  // CONFIG API newsletter (similar a Contact.astro)
  function getPublicEnv(key) {
    try {
      return (import.meta && import.meta.env && Object.prototype.hasOwnProperty.call(import.meta.env, key))
        ? import.meta.env[key]
        : undefined;
    } catch (_e) {
      return undefined;
    }
  }
  const runtimeConfig = (window.__APP_CONFIG && window.__APP_CONFIG.PUBLIC_API_BASE_URL) || undefined;
  const rawBase = runtimeConfig || getPublicEnv('PUBLIC_API_BASE_URL') || 'http://localhost:3000';
  const API_BASE_URL = rawBase.replace(/\/$/, '');
  const SUBSCRIBE_ENDPOINT = '/forms/subscribe'; // Asunción: endpoint del backend
  const API_URL = API_BASE_URL ? `${API_BASE_URL}${SUBSCRIBE_ENDPOINT}` : SUBSCRIBE_ENDPOINT;
  // Flag dev seguro
  let DEV_SIMULATION = false;
  try { if (import.meta && import.meta.env && Object.prototype.hasOwnProperty.call(import.meta.env, 'DEV')) DEV_SIMULATION = !!import.meta.env.DEV; } catch(_e) {}
  const REQUEST_TIMEOUT_MS = 10000;
  const HONEYPOT_FIELD = 'website';

  function fetchWithTimeout(resource, options = {}) {
    const { timeout = REQUEST_TIMEOUT_MS, signal } = options;
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort('timeout'), timeout);
    if (signal) signal.addEventListener('abort', () => controller.abort(signal.reason), { once: true });
    return fetch(resource, { ...options, signal: controller.signal }).finally(() => clearTimeout(timeoutId));
  }
  async function fetchWithRetry(url, options = {}, retries = 1) {
    try { return await fetchWithTimeout(url, options); }
    catch (err) {
      if (retries > 0 && (err?.name === 'AbortError' || err?.message === 'Failed to fetch' || err?.message === 'timeout')) {
        await new Promise(r => setTimeout(r, 600));
        return fetchWithRetry(url, options, retries - 1);
      }
      throw err;
    }
  }

  document.addEventListener('DOMContentLoaded', () => {
    const subscribeForm = document.getElementById('subscribeForm');
    const emailInput = document.getElementById('subscribeEmail');
    const termsCheckbox = document.getElementById('subscribeTerms');
    const submitButton = subscribeForm?.querySelector('.footer__submit-btn');
    if (!subscribeForm || !emailInput || !termsCheckbox || !submitButton) return;

    // Deshabilitar botón hasta tener email válido + términos
    submitButton.disabled = true;

    // Validación en tiempo real
    emailInput.addEventListener('blur', () => validateEmail(emailInput));
    emailInput.addEventListener('input', () => {
      clearErrors(emailInput);
      updateSubmitState();
    });
    termsCheckbox.addEventListener('change', updateSubmitState);

    function updateSubmitState() {
      const value = emailInput.value.trim();
      const emailOk = !!value && isValidEmailFormat(value);
      const termsOk = !!termsCheckbox.checked;
      submitButton.disabled = !(emailOk && termsOk);
    }

    function validateEmail(field) {
      const formGroup = field.closest('.footer__form-group');
      const value = field.value.trim();
      let isValid = true;
      let errorMessage = '';
      clearErrors(field);
      if (!value) { isValid = false; errorMessage = 'El correo electrónico es requerido'; }
      else if (!isValidEmailFormat(value)) { isValid = false; errorMessage = 'Por favor ingresa un correo electrónico válido'; }
      if (formGroup) {
        if (isValid && value) {
          formGroup.classList.add('success');
          formGroup.classList.remove('error');
        } else if (!isValid) {
          formGroup.classList.add('error');
          formGroup.classList.remove('success');
          showError(field, errorMessage);
        }
      }
      return isValid;
    }
    function showError(field, message) {
      const formGroup = field.closest('.footer__form-group');
      if (formGroup) {
        let errorElement = formGroup.querySelector('.footer__error-message');
        if (!errorElement) {
          errorElement = document.createElement('span');
          errorElement.classList.add('footer__error-message');
          formGroup.appendChild(errorElement);
        }
        errorElement.textContent = message;
      }
    }
    function clearErrors(field) {
      const formGroup = field.closest('.footer__form-group');
      if (formGroup) {
        formGroup.classList.remove('error', 'success');
        const errorElement = formGroup.querySelector('.footer__error-message');
        if (errorElement) errorElement.remove();
      }
    }
    function isValidEmailFormat(email) {
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      return emailRegex.test(email);
    }

    // Modales helpers
    function openModal(modalId) {
      if (typeof window !== 'undefined' && window.modalHelpers) {
        window.modalHelpers.openModal(modalId);
      }
    }
    function updateModalMessage(modalId, message) {
      if (typeof window !== 'undefined' && window.modalHelpers) {
        window.modalHelpers.updateModalMessage(modalId, message);
      }
    }

    // Envío
    let inFlightController = null;
    subscribeForm.addEventListener('submit', async (e) => {
      e.preventDefault();

      // Honeypot
      const honey = subscribeForm.querySelector(`[name="${HONEYPOT_FIELD}"]`);
      if (honey && honey.value) return;

      // Validaciones
      const emailOk = validateEmail(emailInput);
      const termsOk = termsCheckbox.checked;
      if (!emailOk || !termsOk) return;

      if (!navigator.onLine) {
        updateModalMessage('subscribeErrorModal', 'Sin conexión a Internet. Revisa tu red e intenta de nuevo.');
        openModal('subscribeErrorModal');
        return;
      }

      submitButton.classList.add('loading');
      submitButton.disabled = true;
      if (inFlightController) { try { inFlightController.abort('new-submit'); } catch(_) {} }
      inFlightController = new AbortController();

      try {
        const payload = {
          email: String(emailInput.value || '').trim(),
          meta: {
            userAgent: navigator.userAgent,
            referrer: document.referrer || null,
            page: window.location.pathname,
            ts: new Date().toISOString() // Fecha ISO 8601 válida para el backend
          }
        };

        console.log('📤 Enviando suscripción a:', API_URL);
        console.log('📋 Payload:', payload);

        let response;
        if (!API_BASE_URL && DEV_SIMULATION) {
          console.log('🧪 Modo simulación - sin backend configurado');
          await new Promise(r => setTimeout(r, 500));
          response = { ok: true, status: 200, json: async () => ({ success: true, simulated: true }) };
        } else {
          response = await fetchWithRetry(API_URL, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json', 'Accept': 'application/json' },
            body: JSON.stringify(payload),
            timeout: REQUEST_TIMEOUT_MS,
            signal: inFlightController.signal,
          });
        }

        console.log('📥 Respuesta HTTP status:', response.status);
        console.log('✅ Response OK:', response.ok);

        if (response.ok) {
          try { 
            const responseData = await response.json();
            console.log('📋 Respuesta backend:', responseData); 
            
            // Verificar si el usuario ya está suscrito
            if (responseData.alreadySubscribed) {
              // Actualizar el modal de info con el mensaje del backend
              updateModalMessage('subscribeInfoModal', String(responseData.message || 'El correo ya está suscrito'));
              openModal('subscribeInfoModal');
            } else {
              // Usuario suscrito exitosamente
              openModal('subscribeSuccessModal');
            }
            
            subscribeForm.reset();
            clearErrors(emailInput);
            submitButton.disabled = true; // hasta que vuelva a ser válido
          } catch (error) {
            console.error('Error parsing response:', error);
            openModal('subscribeSuccessModal'); // fallback
          }
        } else {
          try {
            const errData = await response.json();
            console.error('📋 Error backend:', errData);
            if (errData?.message) {
              updateModalMessage('subscribeErrorModal', String(errData.message));
            }
          } catch {}
          openModal('subscribeErrorModal');
        }
      } catch (err) {
        console.error('❌ Error suscripción:', err);
        let errorMessage = 'No se pudo completar la suscripción. Intenta nuevamente en unos segundos.';
        if (err?.name === 'AbortError') errorMessage = 'La solicitud fue cancelada o expiró. Intenta nuevamente.';
        else if (!navigator.onLine) errorMessage = 'Sin conexión a Internet. Revisa tu red e intenta de nuevo.';
        
        updateModalMessage('subscribeErrorModal', errorMessage);
        openModal('subscribeErrorModal');
      } finally {
        submitButton.classList.remove('loading');
        submitButton.disabled = false;
        inFlightController = null;
      }
    });
  });
</script>

