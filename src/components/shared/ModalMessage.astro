---
export interface Props {
  type: 'success' | 'error' | 'info';
  id: string;
  message: string;
  icon?: string;
  title: string;
}

const { type, id, message, icon } = Astro.props;

// Iconos de FontAwesome por defecto
const defaultIcons = {
  success: 'fa-check-circle',
  error: 'fa-times-circle',
  info: 'fa-circle-info'
};

const modalIcon = icon || defaultIcons[type];
const modalClass = type === 'success' ? 'success-modal' : type === 'error' ? 'error-modal' : 'info-modal';
---

<div id={id} class={modalClass} role="dialog" aria-modal="true" aria-hidden="true">
  <div class="modal-message__overlay">
    <div class="modal-message__content" tabindex="-1">
      <button class="modal-message__close" aria-label="Cerrar modal">&times;</button>
      <div class="modal-message__icon">
        <i class={`fas ${modalIcon}`}></i>
      </div>
      <p class="modal-message__text">{message}</p>
      <button class="modal-btn btn-cta__solid">Entendido</button>
    </div>
  </div>
</div>

<style lang="scss">
  @use '../../styles/config' as *;

  .success-modal,
  .error-modal,
  .info-modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 9999;
    opacity: 0;
    visibility: hidden;
    transition: all 0.3s ease;
    backdrop-filter: blur(4px);

    &.active {
      opacity: 1;
      visibility: visible;
    }
  }

  .modal-message__overlay {
    background: rgba(0, 0, 0, 0.5);
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .modal-message__content {
    background: var(--color-surface);
    border-radius: 0; // Esquinas cuadradas
    padding: 2rem;
    max-width: 400px;
    width: 90%;
    text-align: center;
    position: relative;
    transform: scale(0.8);
    transition: transform 0.3s ease;
    border: 1px solid var(--color-border);
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);

    .success-modal.active &,
    .error-modal.active &,
    .info-modal.active & {
      transform: scale(1);
    }

    &:focus {
      outline: 3px solid var(--color-accent);
      outline-offset: 2px;
    }
  }

  .modal-message__close {
    position: absolute;
    top: 1rem;
    right: 1rem;
    background: none;
    border: none;
    font-size: 1.5rem;
    cursor: pointer;
    color: var(--color-text-secondary);
    padding: 0.25rem;
    border-radius: 0; // Esquinas cuadradas
    transition: color 0.3s ease, background-color 0.3s ease;
    line-height: 1;
    
    &:hover {
      color: var(--color-text);
      background-color: var(--color-border);
    }
    
    &:focus {
      outline: 2px solid var(--color-accent);
      outline-offset: 2px;
    }
  }

  .modal-message__icon {
    font-size: 3rem;
    margin-bottom: 1rem;
    
    .success-modal & {
      color: var(--color-success);
    }
    
    .error-modal & {
      color: var(--color-error);
    }
    
    .info-modal & {
      color: var(--color-primary);
    }
  }

  .modal-message__text {
    font-size: 1.1rem;
    line-height: 1.6;
    margin-bottom: 1.5rem;
    color: var(--color-text);
  }

  // Removido .modal-btn ya que usamos .btn-cta__solid
</style>

<script is:inline>
  // Funciones helper para modales (script inline para evitar errores de TypeScript)
  (function() {
    function initModalHelpers() {
      if (typeof window !== 'undefined' && !window.modalHelpers) {
        window.modalHelpers = {
          openModal: function(modalId) {
            var modal = document.getElementById(modalId);
            if (modal) {
              // Guardar el elemento que tenía el foco antes del modal
              modal.previouslyFocusedElement = document.activeElement;
              
              modal.classList.add('active');
              modal.setAttribute('aria-hidden', 'false');
              document.body.style.overflow = 'hidden';
              
              var content = modal.querySelector('.modal-message__content');
              if (content && content.focus) {
                content.focus();
              }
              
              // Auto-cerrar después de 3 segundos
              setTimeout(function() {
                if (modal.classList.contains('active')) {
                  window.modalHelpers.closeModal(modal);
                }
              }, 10000);
            }
          },
          
          closeModal: function(modal) {
            // Primero quitar el foco de cualquier elemento dentro del modal
            var focusedElement = document.activeElement;
            if (focusedElement && modal.contains(focusedElement)) {
              if (focusedElement.blur) focusedElement.blur();
            }
            
            // Pequeño delay para asegurar que el foco se haya liberado
            setTimeout(function() {
              modal.classList.remove('active');
              modal.setAttribute('aria-hidden', 'true');
              document.body.style.overflow = '';
              
              // Devolver el foco al elemento anterior
              if (modal.previouslyFocusedElement && modal.previouslyFocusedElement.focus) {
                modal.previouslyFocusedElement.focus();
                modal.previouslyFocusedElement = null;
              }
            }, 10);
          },
          
          closeAllModals: function() {
            var activeModals = document.querySelectorAll('.success-modal.active, .error-modal.active, .info-modal.active');
            for (var i = 0; i < activeModals.length; i++) {
              this.closeModal(activeModals[i]);
            }
          },
          
          updateModalMessage: function(modalId, newMessage) {
            var modal = document.getElementById(modalId);
            if (modal) {
              var textElement = modal.querySelector('.modal-message__text');
              if (textElement) {
                textElement.textContent = newMessage;
              }
            }
          }
        };

        // Event listeners globales
        document.addEventListener('click', function(e) {
          var target = e.target;
          
          // Botón de cerrar (X)
          if (target && target.classList && target.classList.contains('modal-message__close')) {
            e.preventDefault();
            var modal = target.closest('.success-modal, .error-modal, .info-modal');
            if (modal) window.modalHelpers.closeModal(modal);
          }
          
          // Botones principales de modal
          if (target && target.classList && target.classList.contains('modal-btn')) {
            e.preventDefault();
            
            // Desenfocar el botón antes de cerrar el modal para evitar el error de aria-hidden
            if (target.blur) target.blur();
            
            var modal = target.closest('.success-modal, .error-modal, .info-modal');
            if (modal) window.modalHelpers.closeModal(modal);
          }
          
          // Click fuera del contenido
          if (target && target.classList && (target.classList.contains('success-modal') || target.classList.contains('error-modal') || target.classList.contains('info-modal'))) {
            window.modalHelpers.closeModal(target);
          }
        });

        // Cerrar con Escape
        document.addEventListener('keydown', function(e) {
          if (e.key === 'Escape') {
            window.modalHelpers.closeAllModals();
          }
        });
      }
    }

    // Inicializar cuando el DOM esté listo
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', initModalHelpers);
    } else {
      initModalHelpers();
    }
  })();
</script>
