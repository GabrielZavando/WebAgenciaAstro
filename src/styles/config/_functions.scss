// =========================
// Functions - API para consumir tokens
// =========================
// Funciones simples para acceder a los tokens sin exponer su estructura

@use 'sass:map';
@use 'tokens' as tokens;

// =========================
// Función principal para obtener tokens
// =========================

/// Obtiene un valor del mapa de tokens
/// @param {String} $category - Categoría del token (colors, spacing, padding, z-index, etc)
/// @param {String} $key - Clave específica del valor buscado
/// @param {String} $theme - Para colores: tema (light, dark). Para otros: null
/// @return {Value} Valor del token
@function token($category, $key, $theme: null) {
  $main-tokens: tokens.$tokens;
  
  @if not map.has-key($main-tokens, $category) {
    @error "La categoría `#{$category}` no existe en los tokens.";
  }
  
  $category-tokens: map.get($main-tokens, $category);
  
  // Si es categoría colors, necesita tema
  @if $category == 'colors' {
    @if $theme == null {
      @error "Para la categoría 'colors' debes especificar un tema (light o dark).";
    }
    
    @if not map.has-key($category-tokens, $theme) {
      @error "El tema `#{$theme}` no existe en colors.";
    }
    
    $theme-tokens: map.get($category-tokens, $theme);
    
    @if not map.has-key($theme-tokens, $key) {
      @error "La clave `#{$key}` no existe en colors.#{$theme}.";
    }
    
    @return map.get($theme-tokens, $key);
  }
  
  // Para otras categorías, buscar la clave específica
  @if not map.has-key($category-tokens, $key) {
    @error "La clave `#{$key}` no existe en #{$category}.";
  }
  
  @return map.get($category-tokens, $key);
}

// =========================
// Funciones específicas
// =========================

/// Devuelve un color desde el mapa de tokens
/// @param {String} $name - Nombre del color (ej. "primary", "surface")
/// @param {String} $theme - Tema visual ("light" por defecto, o "dark")
/// @return {Color} Valor del color correspondiente
@function color($name, $theme: light) {
  @return token(colors, $name, $theme);
}

/// Obtiene un valor de espaciado
/// @param {String} $size - Tamaño (xs, sm, md, lg, xl, 2xl)
/// @return {Length} Valor de espaciado
@function space($size) {
  @return token(spacing, $size);
}

/// Obtiene padding para componentes específicos
/// @param {String} $component - Componente (btn, btn-sm, btn-lg, card, section, container)
/// @return {Length} Valor de padding
@function padding($component) {
  @return token(padding, $component);
}

/// Obtiene un valor de contenedor
/// @param {String} $size - Tamaño del contenedor (max, narrow, blog)
/// @return {Length} Valor del contenedor
@function container($size) {
  @return token(containers, $size);
}