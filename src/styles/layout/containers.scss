// Importación de globals
@use '../globals' as *;

// Sistema de contenedores modular
.container {
    // Contenedor base
    width: 100%;
    margin: 0 auto;
    padding: var(--space-4);
    box-sizing: border-box;
    position: relative;

    // Variantes de tamaño usando variables CSS
    &-sm {
        max-width: var(--container-narrow); // 600px
    }

    &-md {
        max-width: var(--container-blog); // 720px
    }

    &-lg {
        max-width: var(--container-max); // 1200px
    }

    &-xl {
        max-width: $breakpoint-xl; // 1400px
    }

    // Variante fluida
    &-fluid {
        max-width: 100%;
        width: 100%;
        padding-left: var(--space-4);
        padding-right: var(--space-4);

        @include respond-to(sm) {
            padding-left: var(--space-6);
            padding-right: var(--space-6);
        }

        @include respond-to(lg) {
            padding-left: var(--space-8);
            padding-right: var(--space-8);
        }
    }

    // Layout horizontal (flex-row)
    &-row {
        @include flex-row;
        flex-wrap: wrap;
        gap: var(--space-4);

        // Variantes de alineación horizontal
        &--start { justify-content: flex-start; }
        &--center { justify-content: center; }
        &--end { justify-content: flex-end; }
        &--between { justify-content: space-between; }
        &--around { justify-content: space-around; }
        &--evenly { justify-content: space-evenly; }

        // Variantes de alineación vertical
        &--top { align-items: flex-start; }
        &--middle { align-items: center; }
        &--bottom { align-items: flex-end; }
        &--stretch { align-items: stretch; }

        // Variante sin gap
        &--no-gap { gap: 0; }

        // Variante con wrap inverso
        &--reverse { flex-wrap: wrap-reverse; }
    }

    // Layout vertical (flex-column)
    &-column {
        @include flex-column;
        gap: var(--space-4);

        // Variantes de alineación vertical
        &--start { justify-content: flex-start; }
        &--center { justify-content: center; }
        &--end { justify-content: flex-end; }
        &--between { justify-content: space-between; }
        &--around { justify-content: space-around; }
        &--evenly { justify-content: space-evenly; }

        // Variantes de alineación horizontal
        &--left { align-items: flex-start; }
        &--middle { align-items: center; }
        &--right { align-items: flex-end; }
        &--stretch { align-items: stretch; }

        // Variante sin gap
        &--no-gap { gap: 0; }

        // Variante con dirección inversa
        &--reverse { flex-direction: column-reverse; }
    }

    // Sistema de grid
    &-grid {
        display: grid;
        gap: var(--space-4);

        // Variantes de columnas automáticas
        &--auto-sm { grid-template-columns: repeat(auto-fit, minmax(240px, 1fr)); }
        &--auto-md { grid-template-columns: repeat(auto-fit, minmax(320px, 1fr)); }
        &--auto-lg { grid-template-columns: repeat(auto-fit, minmax(400px, 1fr)); }

        // Columnas fijas responsivas
        @for $i from 1 through 6 {
            &--cols-#{$i} {
                grid-template-columns: repeat(#{$i}, 1fr);

                @include respond-to(xs) {
                    grid-template-columns: 1fr;
                }

                @include respond-to(sm) {
                    @if $i > 3 {
                        grid-template-columns: repeat(2, 1fr);
                    }
                }

                @include respond-to(md) {
                    @if $i > 4 {
                        grid-template-columns: repeat(3, 1fr);
                    } @else {
                        grid-template-columns: repeat(#{$i}, 1fr);
                    }
                }
            }
        }
    }

    // Responsive padding
    @include respond-to(sm) {
        padding: var(--space-6);
    }

    @include respond-to(lg) {
        padding: var(--space-8);
    }
}

// Elementos dentro de contenedores
.container-item {
    // Base styles
    position: relative;
    width: 100%;

    // Sistema de columnas basado en flex con porcentajes fijos
    &--col-1 { flex: 0 0 8.33%; max-width: 8.33%; }
    &--col-2 { flex: 0 0 16.66%; max-width: 16.66%; }
    &--col-3 { flex: 0 0 25%; max-width: 25%; }
    &--col-4 { flex: 0 0 33.33%; max-width: 33.33%; }
    &--col-5 { flex: 0 0 41.66%; max-width: 41.66%; }
    &--col-6 { flex: 0 0 50%; max-width: 50%; }
    &--col-7 { flex: 0 0 58.33%; max-width: 58.33%; }
    &--col-8 { flex: 0 0 66.66%; max-width: 66.66%; }
    &--col-9 { flex: 0 0 75%; max-width: 75%; }
    &--col-10 { flex: 0 0 83.33%; max-width: 83.33%; }
    &--col-11 { flex: 0 0 91.66%; max-width: 91.66%; }
    &--col-12 { flex: 0 0 100%; max-width: 100%; }

    // Offsets con porcentajes fijos
    &--offset-0 { margin-left: 0; }
    &--offset-1 { margin-left: 8.33%; }
    &--offset-2 { margin-left: 16.66%; }
    &--offset-3 { margin-left: 25%; }
    &--offset-4 { margin-left: 33.33%; }
    &--offset-5 { margin-left: 41.66%; }
    &--offset-6 { margin-left: 50%; }
    &--offset-7 { margin-left: 58.33%; }
    &--offset-8 { margin-left: 66.66%; }
    &--offset-9 { margin-left: 75%; }
    &--offset-10 { margin-left: 83.33%; }
    &--offset-11 { margin-left: 91.66%; }

    // Ordenamiento
    @for $i from 0 through 12 {
        &--order-#{$i} {
            order: $i;
        }
    }

    // Responsive breakpoints para columnas con porcentajes fijos
    @each $breakpoint, $width in $breakpoints {
        @include respond-to($breakpoint) {
            // Columnas para cada breakpoint
            &--#{$breakpoint}-col-1 { flex: 0 0 8.33%; max-width: 8.33%; }
            &--#{$breakpoint}-col-2 { flex: 0 0 16.66%; max-width: 16.66%; }
            &--#{$breakpoint}-col-3 { flex: 0 0 25%; max-width: 25%; }
            &--#{$breakpoint}-col-4 { flex: 0 0 33.33%; max-width: 33.33%; }
            &--#{$breakpoint}-col-5 { flex: 0 0 41.66%; max-width: 41.66%; }
            &--#{$breakpoint}-col-6 { flex: 0 0 50%; max-width: 50%; }
            &--#{$breakpoint}-col-7 { flex: 0 0 58.33%; max-width: 58.33%; }
            &--#{$breakpoint}-col-8 { flex: 0 0 66.66%; max-width: 66.66%; }
            &--#{$breakpoint}-col-9 { flex: 0 0 75%; max-width: 75%; }
            &--#{$breakpoint}-col-10 { flex: 0 0 83.33%; max-width: 83.33%; }
            &--#{$breakpoint}-col-11 { flex: 0 0 91.66%; max-width: 91.66%; }
            &--#{$breakpoint}-col-12 { flex: 0 0 100%; max-width: 100%; }
        }
    }

    // Alineación individual
    &--align {
        &-start { align-self: flex-start; }
        &-center { align-self: center; }
        &-end { align-self: flex-end; }
        &-stretch { align-self: stretch; }
    }

    // Padding responsive con sintaxis & {} para evitar mixed declarations
    & {
        padding: var(--space-2);
    }
    
    // Media queries para padding responsive
    @include respond-to(sm) {
        & {
            padding: var(--space-3);
        }
    }

    @include respond-to(md) {
        & {
            padding: var(--space-4);
        }
    }
}
